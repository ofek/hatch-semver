{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"hatch-semver A plugin for hatch to support semantic versioning . Hatch-semver relies on python-semver for all the versioning logic. Setup Introduce hatch-semver as a build-dependency to your project (in your pyproject.toml ): [build-system] requires = [ \"hatchling>=1.8.0\" , \"hatch-semver\" , ] build-backend = \"hatchling.build\" Further down in pyproject.toml , where you set up the hatch version command, set version scheme to semver : [tool.hatch.version] path = \"src/<your_project>/__about__.py\" validate-bump = True scheme = \"semver\" Note Hatch-semver plugin will only work with project versions which can be readily parsed by python-semver . Therefore, if you are introducing hatch-semver into an existing project, you must make sure that the project's current version is a valid semantic version. You can test that here . Quick Start Many of hatch's standard versioning commands also work for hatch-semver to bump your project's version in a semver-compliant way. Such command is written as a single string of comma-separated bump instructions as a positional argument of the hatch version subcommand, i.e hatch version <COMMAND> . Starting with 0.1.0 as the original version, here is a series of example commands which illustrate some common ways how to bump the version: Old Version Command New Version 0.1.0 patch 0.1.1 0.1.1 minor,patch,patch 0.2.2 0.2.2 minor 0.3.0 0.3.0 rc 0.3.1-rc.1 0.3.1-rc.1 rc 0.3.1-rc.2 0.3.1-rc.2 release 0.3.1 0.3.1 0.9.5 0.9.5 0.9.5 major,rc 1.0.0-rc.1 1.0.0-rc.1 release 1.0.0 See the command reference for all the commands in full detail. If you are familiar with hatch's standard versioning scheme, perhaps a comparison of the standard scheme and hatch-semver will be of interest.","title":"Home"},{"location":"#hatch-semver","text":"A plugin for hatch to support semantic versioning . Hatch-semver relies on python-semver for all the versioning logic.","title":"hatch-semver"},{"location":"#setup","text":"Introduce hatch-semver as a build-dependency to your project (in your pyproject.toml ): [build-system] requires = [ \"hatchling>=1.8.0\" , \"hatch-semver\" , ] build-backend = \"hatchling.build\" Further down in pyproject.toml , where you set up the hatch version command, set version scheme to semver : [tool.hatch.version] path = \"src/<your_project>/__about__.py\" validate-bump = True scheme = \"semver\" Note Hatch-semver plugin will only work with project versions which can be readily parsed by python-semver . Therefore, if you are introducing hatch-semver into an existing project, you must make sure that the project's current version is a valid semantic version. You can test that here .","title":"Setup"},{"location":"#quick-start","text":"Many of hatch's standard versioning commands also work for hatch-semver to bump your project's version in a semver-compliant way. Such command is written as a single string of comma-separated bump instructions as a positional argument of the hatch version subcommand, i.e hatch version <COMMAND> . Starting with 0.1.0 as the original version, here is a series of example commands which illustrate some common ways how to bump the version: Old Version Command New Version 0.1.0 patch 0.1.1 0.1.1 minor,patch,patch 0.2.2 0.2.2 minor 0.3.0 0.3.0 rc 0.3.1-rc.1 0.3.1-rc.1 rc 0.3.1-rc.2 0.3.1-rc.2 release 0.3.1 0.3.1 0.9.5 0.9.5 0.9.5 major,rc 1.0.0-rc.1 1.0.0-rc.1 release 1.0.0 See the command reference for all the commands in full detail. If you are familiar with hatch's standard versioning scheme, perhaps a comparison of the standard scheme and hatch-semver will be of interest.","title":"Quick Start"},{"location":"CHANGELOG/","text":"Changelog 1.0.0-rc.4 - 2022-11-16 Documentation Renamed User Documentation Workflow to Master PR Closed #53 Development Details Test stage is set up #51 1.0.0-rc.3 - 2022-11-16 Documentation Using admonitions #44 Using a note admonition in index.md #49 Development Details Using actions/checkout@v3 in the CI #46 Using setup-python@v4 in the CI #47 1.0.0-rc.2 - 2022-11-16 Documentation Using admonitions #44 Development Details Using actions/checkout@v3 in the CI #46 Using setup-python@v4 in the CI #47 1.0.0-rc.1 - 2022-11-16 Documentation Using PowerShell instead of cmd commands in pyproject #35 Added githooks to the repo. Set your core.hookspath to .githooks #36 Updated links to published documentation in README.md #43 Development Details Deleted unnecessary copy of the documentation #41 Better documentation pipeline #42 0.2.4 - 2022-11-15 Development Details Using PowerShell instead of cmd commands in pyproject #35 Added githooks to the repo. Set your core.hookspath to .githooks #36 0.2.4-rc.1 - 2022-11-15 Development Details Use hatch-semver for versioning #33 0.2.3 - 2022-11-15 Documentation Separated home.md from README.md #31 0.2.2 - 2022-11-15 Documentation Removed api-docs #29 0.2.1 - 2022-11-15 Documentation Moved user-docs to docs #27 0.2.0 - 2022-11-15 Documentation Wrote user and api documentation #25 0.1.0 - 2022-11-13 New Features Added inline options for prerelease and build tokens #23 Bugfixes Fixed undefined ValeError #16 Can bump prereleases now #17 Can bump builds now #18 Can update version to release #22 Development Details Created tests #19 0.0.8 - 2022-11-10 Bugfixes Fixed another ValueError when bumping major version #14 0.0.7 - 2022-11-10 Bugfixes Fixed NameError when bumping version #12 0.0.6 - 2022-11-10 Bugfixes Major version should be bumpable now #10 0.0.5 - 2022-11-10 No significant changes. 0.0.4 - 2022-11-10 Development Details Plugin structure is ready, should know how to bump major, minor, patch #2 Documentation Better readme, but not final #8 0.0.3 - 2022-11-10 Bugfixes Renamed module to hatch_semver #6 0.0.2 - 2022-11-10 Development Details Prepared project #1 Bugfixes Fixed plugin hook path #4","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"","title":"Changelog"},{"location":"CHANGELOG/#100-rc4-2022-11-16","text":"","title":"1.0.0-rc.4 - 2022-11-16"},{"location":"CHANGELOG/#documentation","text":"Renamed User Documentation Workflow to Master PR Closed #53","title":"Documentation"},{"location":"CHANGELOG/#development-details","text":"Test stage is set up #51","title":"Development Details"},{"location":"CHANGELOG/#100-rc3-2022-11-16","text":"","title":"1.0.0-rc.3 - 2022-11-16"},{"location":"CHANGELOG/#documentation_1","text":"Using admonitions #44 Using a note admonition in index.md #49","title":"Documentation"},{"location":"CHANGELOG/#development-details_1","text":"Using actions/checkout@v3 in the CI #46 Using setup-python@v4 in the CI #47","title":"Development Details"},{"location":"CHANGELOG/#100-rc2-2022-11-16","text":"","title":"1.0.0-rc.2 - 2022-11-16"},{"location":"CHANGELOG/#documentation_2","text":"Using admonitions #44","title":"Documentation"},{"location":"CHANGELOG/#development-details_2","text":"Using actions/checkout@v3 in the CI #46 Using setup-python@v4 in the CI #47","title":"Development Details"},{"location":"CHANGELOG/#100-rc1-2022-11-16","text":"","title":"1.0.0-rc.1 - 2022-11-16"},{"location":"CHANGELOG/#documentation_3","text":"Using PowerShell instead of cmd commands in pyproject #35 Added githooks to the repo. Set your core.hookspath to .githooks #36 Updated links to published documentation in README.md #43","title":"Documentation"},{"location":"CHANGELOG/#development-details_3","text":"Deleted unnecessary copy of the documentation #41 Better documentation pipeline #42","title":"Development Details"},{"location":"CHANGELOG/#024-2022-11-15","text":"","title":"0.2.4 - 2022-11-15"},{"location":"CHANGELOG/#development-details_4","text":"Using PowerShell instead of cmd commands in pyproject #35 Added githooks to the repo. Set your core.hookspath to .githooks #36","title":"Development Details"},{"location":"CHANGELOG/#024-rc1-2022-11-15","text":"","title":"0.2.4-rc.1 - 2022-11-15"},{"location":"CHANGELOG/#development-details_5","text":"Use hatch-semver for versioning #33","title":"Development Details"},{"location":"CHANGELOG/#023-2022-11-15","text":"","title":"0.2.3 - 2022-11-15"},{"location":"CHANGELOG/#documentation_4","text":"Separated home.md from README.md #31","title":"Documentation"},{"location":"CHANGELOG/#022-2022-11-15","text":"","title":"0.2.2 - 2022-11-15"},{"location":"CHANGELOG/#documentation_5","text":"Removed api-docs #29","title":"Documentation"},{"location":"CHANGELOG/#021-2022-11-15","text":"","title":"0.2.1 - 2022-11-15"},{"location":"CHANGELOG/#documentation_6","text":"Moved user-docs to docs #27","title":"Documentation"},{"location":"CHANGELOG/#020-2022-11-15","text":"","title":"0.2.0 - 2022-11-15"},{"location":"CHANGELOG/#documentation_7","text":"Wrote user and api documentation #25","title":"Documentation"},{"location":"CHANGELOG/#010-2022-11-13","text":"","title":"0.1.0 - 2022-11-13"},{"location":"CHANGELOG/#new-features","text":"Added inline options for prerelease and build tokens #23","title":"New Features"},{"location":"CHANGELOG/#bugfixes","text":"Fixed undefined ValeError #16 Can bump prereleases now #17 Can bump builds now #18 Can update version to release #22","title":"Bugfixes"},{"location":"CHANGELOG/#development-details_6","text":"Created tests #19","title":"Development Details"},{"location":"CHANGELOG/#008-2022-11-10","text":"","title":"0.0.8 - 2022-11-10"},{"location":"CHANGELOG/#bugfixes_1","text":"Fixed another ValueError when bumping major version #14","title":"Bugfixes"},{"location":"CHANGELOG/#007-2022-11-10","text":"","title":"0.0.7 - 2022-11-10"},{"location":"CHANGELOG/#bugfixes_2","text":"Fixed NameError when bumping version #12","title":"Bugfixes"},{"location":"CHANGELOG/#006-2022-11-10","text":"","title":"0.0.6 - 2022-11-10"},{"location":"CHANGELOG/#bugfixes_3","text":"Major version should be bumpable now #10","title":"Bugfixes"},{"location":"CHANGELOG/#005-2022-11-10","text":"No significant changes.","title":"0.0.5 - 2022-11-10"},{"location":"CHANGELOG/#004-2022-11-10","text":"","title":"0.0.4 - 2022-11-10"},{"location":"CHANGELOG/#development-details_7","text":"Plugin structure is ready, should know how to bump major, minor, patch #2","title":"Development Details"},{"location":"CHANGELOG/#documentation_8","text":"Better readme, but not final #8","title":"Documentation"},{"location":"CHANGELOG/#003-2022-11-10","text":"","title":"0.0.3 - 2022-11-10"},{"location":"CHANGELOG/#bugfixes_4","text":"Renamed module to hatch_semver #6","title":"Bugfixes"},{"location":"CHANGELOG/#002-2022-11-10","text":"","title":"0.0.2 - 2022-11-10"},{"location":"CHANGELOG/#development-details_8","text":"Prepared project #1","title":"Development Details"},{"location":"CHANGELOG/#bugfixes_5","text":"Fixed plugin hook path #4","title":"Bugfixes"},{"location":"user_guide/1-commands/","text":"Commands A hatch-semver command is written as a single string of comma-separated bump instructions as the single positional argument of the hatch version subcommand, i.e hatch version <COMMAND> . No Command At All If no command is given, hatch version will simply return the current version of the project. Specific Version You can set a specific version directly, as long as it is a semantic version . If bump validation is used, the resulting version must also be higher, or\u2014if only the build identifier changes\u2014at least equal in precedence. Old Version Command validate-bump New Version 2.3.4 13.5.26 True 13.5.26 2.3.4 2.3.3 True ValidationError 2.3.4 2.3.3 False 2.3.3 2.3.4 2.3.4-alpha True ValidationError 2.3.4 2.3.4-alpha False 2.3.4-alpha 2.3.4-alpha 2.3.4 True 2.3.4 3.0.0-beta.2 3.0.0-almost-done.3 True ValidationError 3.0.0-beta.2 3.0.0-rc.1 True 3.0.0-rc.1 4.3.2-rc.2+zoom 4.3.2-rc.2+dev True 4.3.2-rc.2+dev Keep in mind that all pre-releases are ranked by their ASCII sort order and all of them are lower in precedence than the associated normal version, hence the validation errors. Build versions have all the same precedence, hence no validation error. Major, Minor, Patch Old Version Command New Version 0.1.0 patch fix micro 0.1.1 0.1.1 minor 0.2.0 1.0.0 major 1.0.0 These commands bump the version core . fix and micro are aliases of patch . Pre-release and build commands allow specifying their value with = . This, however, is not possible for the version core bump commands. To accomplish bigger version bumps, they can be chained together or replaced by a specific version . Old Version Command New Version 0.1.0 major=7,minor=27 ValueError 0.1.0 7.27.6 7.27.6 0.1.0 fix,fix,fix,fix 0.1.4 0.1.0 major,major,minor 2.1.0 Pre-Release If applied on a version without pre-release identifiers , prerelease \u2014or its aliases rc , pre , pre-release \u2014 will bump the patch version and introduce the default pre-release identifiers rc and 1 . If some pre-release identifiers are already present and the last one is a number, it will be bumped. Naturally, this drops any present build identifiers. Old Version Command New Version 0.9.5 prerelease rc pre pre-release 0.9.6-rc.1 0.9.5-rc.1 pre 0.9.5-rc.2 0.9.5-rc.2+debug rc 0.9.5-rc.3 0.9.5+dev.3 rc 0.9.6-rc.1 Chained With a Version Core Bump You can chain multiple commands together. If the version core is bumped before the pre-release bump, the pre-release bump will not bump the patch version . Old Version Command New Version 0.8.6 rc 0.8.7-rc.1 0.8.6 patch,rc 0.8.7-rc.1 0.8.6 minor,rc 0.9.0-rc.1 0.8.6 major,rc 1.0.0-rc.1 0.8.6 1.3.5,rc,rc 1.3.5-rc.2 0.8.6 major,rc,build 1.0.0-rc.1+build.1 0.8.6 major,build,rc 1.0.0-rc.1 Alphanumeric Pre-Release Identifiers If pre-release identifiers are present but the last one is an alphanumeric identifier \u2014i.e. not a number\u2014it will not be bumped and no further identifiers are introduced (current python-semver behavior). This will normally result in a ValidationError , unless you have turned off validate-bump in your hatch version settings. Old Version Command validate-bump New Version 0.9.7-rc1 prerelease True ValidationError 0.9.7-rc1 prerelease False 0.9.7-rc1 Custom Identifiers You can define your own pre-release identifier like this: prerelease=<identifier> : Old Version Command New Version 0.3.3 pre=alpha 0.3.4-alpha.1 0.3.4-alpha.1 pre 0.3.4-alpha.2 0.3.4-alpha.2 pre=beta 0.3.4-alpha.3 bug Unfortunately, once a pre-release identifier has been introduced, it cannot be changed later. This is a current python-semver bug . For now you can work around it by using a specific version command. Bumping the version core will effectively also drop the identifier, so then another identifier can be introduced again. Alpha, Beta Shortcuts alpha and beta are very common pre-release identifiers. Hatch-semver provides the alpha and beta shortcuts for prerelease=alpha and prerelease=beta , respectively. Old Version Command New Version 5.12.3 alpha 5.12.4-alpha.1 5.12.3 beta 5.12.4-beta.1 alpha and beta themselves are not aliases of prerelease . You cannot use them to define a custom identifier. rc , however, is a true alias and allows this. Old Version Command New Version 5.12.3 alpha=ALPHA ValueError 5.12.3 rc=RC 5.12.4-RC.1 Release The release command turns a pre-release version into a final release. If applied on a bare version core , it will result in a ValidationError because the resulting version is not higher than the old one. Bump validation can be turned off . Old Version Command validate-bump New Version 1.0.0-rc4+build.23 release True 1.0.0 1.0.0 release True ValidationError 1.0.0 release False 1.0.0 You can meaningfully use release chained with another commands, although the alternatives are perhaps more intuitive: Old Version Command New Version 7.1.8-rc.1 release,beta 7.1.9-beta.1 7.1.8-rc.1 patch,beta 7.1.9-beta.1 Build The build command introduces the default build identifiers build and 1 . If some build identifiers are already present, and the last one is a number , it will be bumped. Similar to the pre-release command, you can specify you own custom build idetifier after = . Same as with pre-releases, this is prone to a bug in python-semver . Old Version Command New Version 4.8.5-rc.2 build 4.8.5-rc.2+build.1 4.8.5-rc.2+build.1 build 4.8.5-rc.2+build.2 1.0.0 build=fix-docs 1.0.0+fix-docs.1 1.0.0+fix-docs.1 build 1.0.0+fix-docs.2 1.0.0+fix-docs.2 build=docs-fixed 1.0.0+fix-docs.3 bug Build versions are all of the same precedence, so technically, a version bump does not occur. Normally, bump-validation checks whether the resulting version is of the same precedence as the old one. However, if all that changes is the build identifier, a version of equal precedence is sufficient to pass the validation. Old Version Command validate-bump New Version 4.8.5-rc.2 build=tracing True 4.8.5-rc.2+tracing.1 4.8.5-rc.2+tracing.2 4.8.5-rc.2+debug True 4.8.5-rc.2+debug Development Build Shortcut Sometimes people release what they call development builds, or dev builds . A convenient shortcut for build=dev is dev . Similar to the alpha and beta shortcuts, dev is not an alias, so don't try to specify a custom build identifier with it. Old Version Command New Version 2.9.3 build=dev 2.9.3+dev.1 2.9.3 dev 2.9.3+dev.1 2.9.3 dev=develop ValueError Alphanumeric Build Identifiers Similar to python-semver's inability to bump alphanumeric pre-release identifiers, alphanumeric build identifiers will also not be bumped. The returned result is the exact same version. A ValidationError is not raised because when bumping or changing build identifiers equal precedece of the old and new version is sufficient. Old Version Command validate-bump New Version 6.3.4-rc.2+verbose build True 6.3.4-rc.2+verbose Chained Commands You can chain commands together by comma like this: <command1>,<command2>,<command3>... . They are executed one by one in the specified sequence. Some straight-forward and most common examples of chained commands are presented in the pre-release section. The bump validation check is performed only after the last command is executed. It is therefore OK to temporarily violate the version precedence rule for the intermediate versions as long as the last resulting version passes the validation agains the old version. Old Version Command validate-bump New Version 8.0.4 major,8.0.5 True 8.0.5 8.0.4 8.0.3,patch,build True 8.0.4+build.1 8.0.4+build.1 8.0.3,patch,build True 8.0.4+build.1 8.0.4-alpha.1 8.0.4,alpha,pre True 8.0.4-alpha.2","title":"Commands"},{"location":"user_guide/1-commands/#commands","text":"A hatch-semver command is written as a single string of comma-separated bump instructions as the single positional argument of the hatch version subcommand, i.e hatch version <COMMAND> .","title":"Commands"},{"location":"user_guide/1-commands/#no-command-at-all","text":"If no command is given, hatch version will simply return the current version of the project.","title":"No Command At All"},{"location":"user_guide/1-commands/#specific-version","text":"You can set a specific version directly, as long as it is a semantic version . If bump validation is used, the resulting version must also be higher, or\u2014if only the build identifier changes\u2014at least equal in precedence. Old Version Command validate-bump New Version 2.3.4 13.5.26 True 13.5.26 2.3.4 2.3.3 True ValidationError 2.3.4 2.3.3 False 2.3.3 2.3.4 2.3.4-alpha True ValidationError 2.3.4 2.3.4-alpha False 2.3.4-alpha 2.3.4-alpha 2.3.4 True 2.3.4 3.0.0-beta.2 3.0.0-almost-done.3 True ValidationError 3.0.0-beta.2 3.0.0-rc.1 True 3.0.0-rc.1 4.3.2-rc.2+zoom 4.3.2-rc.2+dev True 4.3.2-rc.2+dev Keep in mind that all pre-releases are ranked by their ASCII sort order and all of them are lower in precedence than the associated normal version, hence the validation errors. Build versions have all the same precedence, hence no validation error.","title":"Specific Version"},{"location":"user_guide/1-commands/#major-minor-patch","text":"Old Version Command New Version 0.1.0 patch fix micro 0.1.1 0.1.1 minor 0.2.0 1.0.0 major 1.0.0 These commands bump the version core . fix and micro are aliases of patch . Pre-release and build commands allow specifying their value with = . This, however, is not possible for the version core bump commands. To accomplish bigger version bumps, they can be chained together or replaced by a specific version . Old Version Command New Version 0.1.0 major=7,minor=27 ValueError 0.1.0 7.27.6 7.27.6 0.1.0 fix,fix,fix,fix 0.1.4 0.1.0 major,major,minor 2.1.0","title":"Major, Minor, Patch"},{"location":"user_guide/1-commands/#pre-release","text":"If applied on a version without pre-release identifiers , prerelease \u2014or its aliases rc , pre , pre-release \u2014 will bump the patch version and introduce the default pre-release identifiers rc and 1 . If some pre-release identifiers are already present and the last one is a number, it will be bumped. Naturally, this drops any present build identifiers. Old Version Command New Version 0.9.5 prerelease rc pre pre-release 0.9.6-rc.1 0.9.5-rc.1 pre 0.9.5-rc.2 0.9.5-rc.2+debug rc 0.9.5-rc.3 0.9.5+dev.3 rc 0.9.6-rc.1","title":"Pre-Release"},{"location":"user_guide/1-commands/#chained-with-a-version-core-bump","text":"You can chain multiple commands together. If the version core is bumped before the pre-release bump, the pre-release bump will not bump the patch version . Old Version Command New Version 0.8.6 rc 0.8.7-rc.1 0.8.6 patch,rc 0.8.7-rc.1 0.8.6 minor,rc 0.9.0-rc.1 0.8.6 major,rc 1.0.0-rc.1 0.8.6 1.3.5,rc,rc 1.3.5-rc.2 0.8.6 major,rc,build 1.0.0-rc.1+build.1 0.8.6 major,build,rc 1.0.0-rc.1","title":"Chained With a Version Core Bump"},{"location":"user_guide/1-commands/#alphanumeric-pre-release-identifiers","text":"If pre-release identifiers are present but the last one is an alphanumeric identifier \u2014i.e. not a number\u2014it will not be bumped and no further identifiers are introduced (current python-semver behavior). This will normally result in a ValidationError , unless you have turned off validate-bump in your hatch version settings. Old Version Command validate-bump New Version 0.9.7-rc1 prerelease True ValidationError 0.9.7-rc1 prerelease False 0.9.7-rc1","title":"Alphanumeric Pre-Release Identifiers"},{"location":"user_guide/1-commands/#custom-identifiers","text":"You can define your own pre-release identifier like this: prerelease=<identifier> : Old Version Command New Version 0.3.3 pre=alpha 0.3.4-alpha.1 0.3.4-alpha.1 pre 0.3.4-alpha.2 0.3.4-alpha.2 pre=beta 0.3.4-alpha.3 bug Unfortunately, once a pre-release identifier has been introduced, it cannot be changed later. This is a current python-semver bug . For now you can work around it by using a specific version command. Bumping the version core will effectively also drop the identifier, so then another identifier can be introduced again.","title":"Custom Identifiers"},{"location":"user_guide/1-commands/#alpha-beta-shortcuts","text":"alpha and beta are very common pre-release identifiers. Hatch-semver provides the alpha and beta shortcuts for prerelease=alpha and prerelease=beta , respectively. Old Version Command New Version 5.12.3 alpha 5.12.4-alpha.1 5.12.3 beta 5.12.4-beta.1 alpha and beta themselves are not aliases of prerelease . You cannot use them to define a custom identifier. rc , however, is a true alias and allows this. Old Version Command New Version 5.12.3 alpha=ALPHA ValueError 5.12.3 rc=RC 5.12.4-RC.1","title":"Alpha, Beta Shortcuts"},{"location":"user_guide/1-commands/#release","text":"The release command turns a pre-release version into a final release. If applied on a bare version core , it will result in a ValidationError because the resulting version is not higher than the old one. Bump validation can be turned off . Old Version Command validate-bump New Version 1.0.0-rc4+build.23 release True 1.0.0 1.0.0 release True ValidationError 1.0.0 release False 1.0.0 You can meaningfully use release chained with another commands, although the alternatives are perhaps more intuitive: Old Version Command New Version 7.1.8-rc.1 release,beta 7.1.9-beta.1 7.1.8-rc.1 patch,beta 7.1.9-beta.1","title":"Release"},{"location":"user_guide/1-commands/#build","text":"The build command introduces the default build identifiers build and 1 . If some build identifiers are already present, and the last one is a number , it will be bumped. Similar to the pre-release command, you can specify you own custom build idetifier after = . Same as with pre-releases, this is prone to a bug in python-semver . Old Version Command New Version 4.8.5-rc.2 build 4.8.5-rc.2+build.1 4.8.5-rc.2+build.1 build 4.8.5-rc.2+build.2 1.0.0 build=fix-docs 1.0.0+fix-docs.1 1.0.0+fix-docs.1 build 1.0.0+fix-docs.2 1.0.0+fix-docs.2 build=docs-fixed 1.0.0+fix-docs.3 bug Build versions are all of the same precedence, so technically, a version bump does not occur. Normally, bump-validation checks whether the resulting version is of the same precedence as the old one. However, if all that changes is the build identifier, a version of equal precedence is sufficient to pass the validation. Old Version Command validate-bump New Version 4.8.5-rc.2 build=tracing True 4.8.5-rc.2+tracing.1 4.8.5-rc.2+tracing.2 4.8.5-rc.2+debug True 4.8.5-rc.2+debug","title":"Build"},{"location":"user_guide/1-commands/#development-build-shortcut","text":"Sometimes people release what they call development builds, or dev builds . A convenient shortcut for build=dev is dev . Similar to the alpha and beta shortcuts, dev is not an alias, so don't try to specify a custom build identifier with it. Old Version Command New Version 2.9.3 build=dev 2.9.3+dev.1 2.9.3 dev 2.9.3+dev.1 2.9.3 dev=develop ValueError","title":"Development Build Shortcut"},{"location":"user_guide/1-commands/#alphanumeric-build-identifiers","text":"Similar to python-semver's inability to bump alphanumeric pre-release identifiers, alphanumeric build identifiers will also not be bumped. The returned result is the exact same version. A ValidationError is not raised because when bumping or changing build identifiers equal precedece of the old and new version is sufficient. Old Version Command validate-bump New Version 6.3.4-rc.2+verbose build True 6.3.4-rc.2+verbose","title":"Alphanumeric Build Identifiers"},{"location":"user_guide/1-commands/#chained-commands","text":"You can chain commands together by comma like this: <command1>,<command2>,<command3>... . They are executed one by one in the specified sequence. Some straight-forward and most common examples of chained commands are presented in the pre-release section. The bump validation check is performed only after the last command is executed. It is therefore OK to temporarily violate the version precedence rule for the intermediate versions as long as the last resulting version passes the validation agains the old version. Old Version Command validate-bump New Version 8.0.4 major,8.0.5 True 8.0.5 8.0.4 8.0.3,patch,build True 8.0.4+build.1 8.0.4+build.1 8.0.3,patch,build True 8.0.4+build.1 8.0.4-alpha.1 8.0.4,alpha,pre True 8.0.4-alpha.2","title":"Chained Commands"},{"location":"user_guide/2-migrating-to-semver/","text":"Migrating From Hatch Standard Versioning Scheme If you have used the hatch standard versioning scheme plugin before and now want to use this semver plugin instead, here is a short rundown of the similarities and differences betweent the two and their use. Identical or Similar Behavior Old version command Standard Plugin Semver Plugin 1.0.0 major 2.0.0 2.0.0 1.0.0 minor 1.1.0 1.1.0 1.0.0 micro patch fix 1.0.1 1.0.1 1.0.0 dev 1.0.0.dev0 1.0.0+dev.1 Bumping of Pre-Releases When bumping only the pre-release segment of a version which has not yet any pre-release segment, hatch-semver automatically bumps the patch version. It also automatically adds a purely numeric identifier 1 through which bumping becomes possible. Without a numeric identifier, this pre-release could not be bumped . Old version command Standard Plugin Semver Plugin Comment 1.0.0 alpha 1.0.0a0 1.0.1-alpha.1 patch version auto-bumped 1.0.0 beta 1.1.0b0 1.0.1-beta.1 patch version auto-bumped 1.0.0 rc pre 1.1.0rc0 1.0.1-rc.1 patch version auto-bumped The patch segment of the version core is not bumped, if prerelease is bumped in a chained command where a version core bump has occurred before. Old version command Standard Plugin Semver Plugin Comment 1.0.0 patch,alpha 1.0.1a0 1.0.1-alpha.1 patch version not auto-bumped 1.0.0 minor,beta 1.1.0b0 1.1.0-beta.1 patch version not auto-bumped 1.0.0 major,rc 2.0.0rc0 2.0.0-rc.1 patch version not auto-bumped See more examples in the commands documentation. Differences The release command of hatch-semver does not simply return the version core stripped off the pre-release and build idetifiers. It performs a real bump to the release version . This normally goes along with a validation check. When you try to release version which is not a prerelease, this will raise a ValidationError. Old version command validate-bump Standard Plugin Semver Plugin 1.0.0 release True 1.0.0 ValueError 1.0.0 release False 1.0.0 1.0.0 1.0.0+dev.1 release True 1.0.0 ValueError 1.0.0+dev.1 release False 1.0.0 1.0.0 Unsupported Commands Hatch's standard 's versioning scheme's rev , r , post commands are not supported. There is no concept of a revision or a post-release in Semver . However, with build=post , for instance you could accomplish add the build identifiers post and 1 which would be similar to a PEP 440 post-release. Like in PEP 440, also in Semver build identifiers have the same precedence. The abbreviations a , b , and c for alpha , beta , rc , and preview are also not supported and will result in python-semver throwing a ValueError with ... is not a valid SemVer string . Hatch-semver actually uses pre as an alias for prerelease . Semver allows custom identifiers in prereleases, so if you really wanted an a0 pre-release, you could achieve it by bumping to a specific version, i.e. hatch version 1.2.3-a0 although such alphanumeric identifiers cannot be bumped by python-semver . Better go with 1.2.3-a.1 which could be bumped to 1.2.3-a.2 , 1.2.3-a.3 etc.","title":"Migrating To Semver"},{"location":"user_guide/2-migrating-to-semver/#migrating-from-hatch-standard-versioning-scheme","text":"If you have used the hatch standard versioning scheme plugin before and now want to use this semver plugin instead, here is a short rundown of the similarities and differences betweent the two and their use.","title":"Migrating From Hatch Standard Versioning Scheme"},{"location":"user_guide/2-migrating-to-semver/#identical-or-similar-behavior","text":"Old version command Standard Plugin Semver Plugin 1.0.0 major 2.0.0 2.0.0 1.0.0 minor 1.1.0 1.1.0 1.0.0 micro patch fix 1.0.1 1.0.1 1.0.0 dev 1.0.0.dev0 1.0.0+dev.1","title":"Identical or Similar Behavior"},{"location":"user_guide/2-migrating-to-semver/#bumping-of-pre-releases","text":"When bumping only the pre-release segment of a version which has not yet any pre-release segment, hatch-semver automatically bumps the patch version. It also automatically adds a purely numeric identifier 1 through which bumping becomes possible. Without a numeric identifier, this pre-release could not be bumped . Old version command Standard Plugin Semver Plugin Comment 1.0.0 alpha 1.0.0a0 1.0.1-alpha.1 patch version auto-bumped 1.0.0 beta 1.1.0b0 1.0.1-beta.1 patch version auto-bumped 1.0.0 rc pre 1.1.0rc0 1.0.1-rc.1 patch version auto-bumped The patch segment of the version core is not bumped, if prerelease is bumped in a chained command where a version core bump has occurred before. Old version command Standard Plugin Semver Plugin Comment 1.0.0 patch,alpha 1.0.1a0 1.0.1-alpha.1 patch version not auto-bumped 1.0.0 minor,beta 1.1.0b0 1.1.0-beta.1 patch version not auto-bumped 1.0.0 major,rc 2.0.0rc0 2.0.0-rc.1 patch version not auto-bumped See more examples in the commands documentation.","title":"Bumping of Pre-Releases"},{"location":"user_guide/2-migrating-to-semver/#differences","text":"The release command of hatch-semver does not simply return the version core stripped off the pre-release and build idetifiers. It performs a real bump to the release version . This normally goes along with a validation check. When you try to release version which is not a prerelease, this will raise a ValidationError. Old version command validate-bump Standard Plugin Semver Plugin 1.0.0 release True 1.0.0 ValueError 1.0.0 release False 1.0.0 1.0.0 1.0.0+dev.1 release True 1.0.0 ValueError 1.0.0+dev.1 release False 1.0.0 1.0.0","title":"Differences"},{"location":"user_guide/2-migrating-to-semver/#unsupported-commands","text":"Hatch's standard 's versioning scheme's rev , r , post commands are not supported. There is no concept of a revision or a post-release in Semver . However, with build=post , for instance you could accomplish add the build identifiers post and 1 which would be similar to a PEP 440 post-release. Like in PEP 440, also in Semver build identifiers have the same precedence. The abbreviations a , b , and c for alpha , beta , rc , and preview are also not supported and will result in python-semver throwing a ValueError with ... is not a valid SemVer string . Hatch-semver actually uses pre as an alias for prerelease . Semver allows custom identifiers in prereleases, so if you really wanted an a0 pre-release, you could achieve it by bumping to a specific version, i.e. hatch version 1.2.3-a0 although such alphanumeric identifiers cannot be bumped by python-semver . Better go with 1.2.3-a.1 which could be bumped to 1.2.3-a.2 , 1.2.3-a.3 etc.","title":"Unsupported Commands"}]}